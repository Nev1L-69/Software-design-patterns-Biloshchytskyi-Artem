README для системы управления билетами для кино

Singleton Pattern
для воплащения Singleton паттерна использовался класс CinemaConfig потопму что конфигурация должна быть только одна для предотвращения конфликтов
private CinemaConfig() {} был написан чтобы не было лоступа к этой конфигурации тем самым уберая возможно создания еще одной конфигурации
далее написаны геттеры для экземпляра и остальных переменных

Factory method Pattern
для реалтзации этого паттерна был реализован интерфейс Movie
суть заключается в том чтобы создавать похожие по смыслу но разные по структуре обьекты
тут реализовано что у каждого кино есть название и тип ипри одном и том же названии может быть разный тип фильма обычный фильм или аймакс

Abstract Factory Pattern
этот паттерн нужен для создания семейств связанных обьектов по типу UI дизайна чтобы они были в одном стиле
его можно использовать для создания одного типа обьектов(кнопки) например темной или светлой темы

Builder Pattern
используется для создания сложных обьектов последовательно
TicketBooking booking = new TicketBooking.TicketBookingBuilder()
.setMovieTitle("Inception")
.setSeatNumber("A1")
.setSnackCombo("Popcorn and Soda")
.build();
это удобнее если есть много опциональных параметров

Prototyp
этот паттерн используется для создания клонов с небольшим изменением других обьектов вместо созданиях этих обьектов с нуля
тут он используется для создания еще одного расписания с измененным временем на 18:00
